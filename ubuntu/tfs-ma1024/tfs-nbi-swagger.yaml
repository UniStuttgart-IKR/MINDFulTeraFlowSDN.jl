openapi: 3.0.0
info:
  title: TeraFlowSDN (TFS) Northbound Interface API
  version: "1.0.0"
servers:
  - url: /tfs-api
tags:
  - name: Contexts
    description: Operations on network contexts
  - name: Topologies
    description: Operations on network topologies within a context
  - name: Services
    description: Service management within a context
  - name: Slices
    description: Slice management within a context
  - name: Devices
    description: Device inventory and configuration
  - name: Links
    description: Physical and virtual links
  - name: Connections
    description: Service connections
  - name: PolicyRules
    description: Policy rules management

paths:
  /context_ids:
    get:
      tags: [Contexts]
      summary: List all context UUIDs
      responses:
        "200":
          description: Array of context UUID strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /contexts:
    get:
      tags: [Contexts]
      summary: List all contexts
      responses:
        "200":
          description: List of context objects
          content:
            application/json:
              schema:
                type: object
    post:
      tags: [Contexts]
      summary: Create or update one or more contexts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Context'
                - type: object
                  properties:
                    contexts:
                      type: array
                      items:
                        $ref: '#/components/schemas/Context'
      responses:
        "200":
          description: The created or updated context objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Context'

  /context/{context_uuid}:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Contexts]
      summary: Get a specific context
      responses:
        "200":
          description: Context object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
    put:
      tags: [Contexts]
      summary: Update a specific context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Context'
      responses:
        "200":
          description: Updated context object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
    delete:
      tags: [Contexts]
      summary: Delete a specific context
      responses:
        "200":
          description: Empty response on success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /dummy_contexts:
    get:
      tags: [Contexts]
      summary: Get a dummy view of all context-related resources
      responses:
        "200":
          description: Aggregated dummy context data
          content:
            application/json:
              schema:
                type: object

  /context/{context_uuid}/topology_ids:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Topologies]
      summary: List all topology UUIDs in a context
      responses:
        "200":
          description: Array of topology UUID strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /context/{context_uuid}/topologies:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Topologies]
      summary: List all topologies in a context
      responses:
        "200":
          description: List of topology objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topology'
    post:
      tags: [Topologies]
      summary: Create or update topologies in a context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Topology'
                - type: object
                  properties:
                    topologies:
                      type: array
                      items:
                        $ref: '#/components/schemas/Topology'
      responses:
        "200":
          description: Created or updated topologies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topology'

  /context/{context_uuid}/topology/{topology_uuid}:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
      - name: topology_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Topologies]
      summary: Get a specific topology
      responses:
        "200":
          description: Topology object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
    put:
      tags: [Topologies]
      summary: Update a specific topology
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topology'
      responses:
        "200":
          description: Updated topology object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
    delete:
      tags: [Topologies]
      summary: Delete a specific topology
      responses:
        "200":
          description: Empty response on success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /context/{context_uuid}/topology_details/{topology_uuid}:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
      - name: topology_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Topologies]
      summary: Get detailed topology information
      responses:
        "200":
          description: Detailed topology object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'

  /context/{context_uuid}/service_ids:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Services]
      summary: List all service UUIDs in a context
      responses:
        "200":
          description: Array of service UUID strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /context/{context_uuid}/services:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Services]
      summary: List all services in a context
      responses:
        "200":
          description: List of service objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
    post:
      tags: [Services]
      summary: Create services in a context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Service'
                - type: object
                  properties:
                    services:
                      type: array
                      items:
                        $ref: '#/components/schemas/Service'
      responses:
        "200":
          description: Created service objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'

  /context/{context_uuid}/service/{service_uuid}:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
      - name: service_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Services]
      summary: Get a specific service
      responses:
        "200":
          description: Service object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    put:
      tags: [Services]
      summary: Update a specific service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        "200":
          description: Updated service object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
    delete:
      tags: [Services]
      summary: Delete a specific service
      responses:
        "200":
          description: Empty response on success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /context/{context_uuid}/slice_ids:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Slices]
      summary: List all slice UUIDs in a context
      responses:
        "200":
          description: Array of slice UUID strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /context/{context_uuid}/slices:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Slices]
      summary: List all slices in a context
      responses:
        "200":
          description: List of slice objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slice'
    post:
      tags: [Slices]
      summary: Create slices in a context
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Slice'
                - type: object
                  properties:
                    slices:
                      type: array
                      items:
                        $ref: '#/components/schemas/Slice'
      responses:
        "200":
          description: Created slice objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Slice'

  /context/{context_uuid}/slice/{slice_uuid}:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
      - name: slice_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Slices]
      summary: Get a specific slice
      responses:
        "200":
          description: Slice object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slice'
    put:
      tags: [Slices]
      summary: Update a specific slice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Slice'
      responses:
        "200":
          description: Updated slice object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slice'
    delete:
      tags: [Slices]
      summary: Delete a specific slice
      responses:
        "200":
          description: Empty response on success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /device_ids:
    get:
      tags: [Devices]
      summary: List all device UUIDs
      responses:
        "200":
          description: Array of device UUID strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /devices:
    get:
      tags: [Devices]
      summary: List all devices
      responses:
        "200":
          description: List of device objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      tags: [Devices]
      summary: Add devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Device'
                - type: object
                  properties:
                    devices:
                      type: array
                      items:
                        $ref: '#/components/schemas/Device'
      responses:
        "200":
          description: Added device objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'

  /device/{device_uuid}:
    parameters:
      - name: device_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Devices]
      summary: Get a specific device
      responses:
        "200":
          description: Device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    put:
      tags: [Devices]
      summary: Configure a specific device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        "200":
          description: Updated device object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      tags: [Devices]
      summary: Delete a specific device
      responses:
        "200":
          description: Empty response on success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /link_ids:
    get:
      tags: [Links]
      summary: List all link UUIDs
      responses:
        "200":
          description: Array of link UUID strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /links:
    get:
      tags: [Links]
      summary: List all links
      responses:
        "200":
          description: List of link objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
    post:
      tags: [Links]
      summary: Create or update links
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Link'
                - type: object
                  properties:
                    links:
                      type: array
                      items:
                        $ref: '#/components/schemas/Link'
      responses:
        "200":
          description: Created or updated link objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'

  /link/{link_uuid}:
    parameters:
      - name: link_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Links]
      summary: Get a specific link
      responses:
        "200":
          description: Link object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
    put:
      tags: [Links]
      summary: Update a specific link (physical or virtual)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
      responses:
        "200":
          description: Updated link object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
    delete:
      tags: [Links]
      summary: Delete a specific link (physical or virtual)
      responses:
        "200":
          description: Empty response on success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'

  /context/{context_uuid}/service/{service_uuid}/connection_ids:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
      - name: service_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Connections]
      summary: List all connection UUIDs for a service
      responses:
        "200":
          description: Array of connection UUID strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /context/{context_uuid}/service/{service_uuid}/connections:
    parameters:
      - name: context_uuid
        in: path
        required: true
        schema:
          type: string
      - name: service_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Connections]
      summary: List all connections for a service
      responses:
        "200":
          description: List of connection objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'

  /connection/{connection_uuid}:
    parameters:
      - name: connection_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Connections]
      summary: Get a specific connection
      responses:
        "200":
          description: Connection object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'

  /policyrule_ids:
    get:
      tags: [PolicyRules]
      summary: List all policy rule UUIDs
      responses:
        "200":
          description: Array of policy rule UUID strings
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /policyrules:
    get:
      tags: [PolicyRules]
      summary: List all policy rules
      responses:
        "200":
          description: List of policy rule objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolicyRule'

  /policyrule/{policyrule_uuid}:
    parameters:
      - name: policyrule_uuid
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [PolicyRules]
      summary: Get a specific policy rule
      responses:
        "200":
          description: PolicyRule object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule'

components:
  schemas:
    Empty:
      type: object
      description: Empty message
    Context:
      type: object
      description: Context resource representation
    Topology:
      type: object
      description: Topology resource representation
    Service:
      type: object
      description: Service resource representation
    Slice:
      type: object
      description: Slice resource representation
    Device:
      type: object
      description: Device resource representation
    Link:
      type: object
      description: Link resource representation
    Connection:
      type: object
      description: Connection resource representation
    PolicyRule:
      type: object
      description: Policy rule resource representation
